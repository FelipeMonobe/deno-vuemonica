import{d as h,r as f,c as m,g as s,w as n,v as d,u as e,h as u,i as p,o as b}from"./vendor.44207f7c.js";const v="https://deno-harmonica-toolkit-api.deno.dev",_=(i,t)=>{const c=new URL(`${v}/harmonica/transpose`),r=JSON.stringify({tablature:i,pitchAdjustment:t});return fetch(c.toString(),{method:"post",body:r}).then(a=>a.text())},k={class:"d-flex card mt-3 p-3"},w={class:"d-flex"},x={class:"flex-fill px-3"},R=s("div",null,[s("p",null,"Pitch adjustment:")],-1),y={class:"form-check"},g=s("label",{class:"form-check-label",for:"decreasePitch"},"Decrease",-1),P={class:"form-check"},U=s("label",{class:"form-check-label",for:"increasePitch"},"Increase",-1),C={class:"flex-fill"},V={class:"mt-2"},S=h({setup(i){const t=f({tablature:"",result:"",pitch:-1,showResults:!1}),c=async()=>{if(!t.tablature)return Promise.resolve();const a=await _(t.tablature,t.pitch);t.result=a,t.showResults=!0},r=()=>{t.tablature="",t.result="",t.pitch=-1,t.showResults=!1};return(a,o)=>(b(),m("div",k,[s("div",w,[s("div",x,[R,s("div",y,[n(s("input",{"onUpdate:modelValue":o[0]||(o[0]=l=>e(t).pitch=l),value:-1,class:"form-check-input",type:"radio",id:"decreasePitch",checked:""},null,512),[[d,e(t).pitch]]),g]),s("div",P,[n(s("input",{"onUpdate:modelValue":o[1]||(o[1]=l=>e(t).pitch=l),value:1,class:"form-check-input",type:"radio",id:"increasePitch"},null,512),[[d,e(t).pitch]]),U]),s("div",{class:"mb-2 d-grid gap-1"},[s("button",{class:"btn btn-primary btn-lg",onClick:c}," Transpose "),s("button",{class:"btn btn-secondary btn-lg",onClick:r}," Reset ")])]),s("div",C,[s("div",V,[n(s("textarea",{"onUpdate:modelValue":o[2]||(o[2]=l=>e(t).tablature=l),class:"form-control",rows:"10",cols:"30"},null,512),[[u,e(t).tablature],[p,!e(t).showResults]])]),s("div",null,[n(s("textarea",{"onUpdate:modelValue":o[3]||(o[3]=l=>e(t).result=l),class:"form-control",rows:"10",cols:"30",readonly:""},null,512),[[u,e(t).result],[p,e(t).showResults]])])])])]))}});export{S as default};
